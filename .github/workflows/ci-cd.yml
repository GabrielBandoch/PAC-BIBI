name: CI/CD

on:
  push:
    branches:
      - main
      - production
  pull_request:
    branches:
      - main
      - production

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14.5
        env:
          POSTGRES_DB: ${{ secrets.DB_NAME }}
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Set up backend env
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=\"${{ secrets.DB_PASSWORD }}\"" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DB_PORT=5432" >> $GITHUB_ENV

      - name: Debug env
        run: |
          echo "DB_USER=$DB_USER"
          echo "DB_HOST=$DB_HOST"
          echo "DB_NAME=$DB_NAME"
          echo "DB_PASSWORD length=${#DB_PASSWORD}"

      # ---------------- Backend ----------------
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U $DB_USER; do
            echo "Esperando Postgres..."
            sleep 2
          done

      - name: Setup database for tests
        run: node backend/ci-setup.js
        env:
          NODE_ENV: ci
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: localhost
          DB_PORT: 5432

      - name: Run backend tests
        run: |
          cd backend
          npm test

      - name: Build backend
        run: |
          cd backend
          npm run build || echo "No build script for backend"

      # ---------------- Frontend ----------------
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend lint
        run: |
          cd frontend
          npm run lint || echo "No lint script in frontend"

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      # ---------------- Notifications ----------------
      - name: Notify Teams
        if: always()
        run: |
          STATUS="‚úÖ Success"
          if [ "${{ job.status }}" != "success" ]; then STATUS="‚ùå Failed"; fi
          curl -H 'Content-Type: application/json' \
          -d '{
            "title": "'"$STATUS"'",
            "text": "Workflow CI/CD rodou na branch ${{ github.ref }}.\nVeja detalhes: ${{ github.run_url }}"
          }' ${{ secrets.TEAM_WEBHOOK_URL }}

  deploy-production:
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy backend
        run: |
          cd backend
          echo "Deploy backend para produ√ß√£o..."
          # Coloque aqui seus comandos reais de deploy

      - name: Deploy frontend
        run: |
          cd frontend
          echo "Deploy frontend para produ√ß√£o..."
          # Coloque aqui seus comandos reais de deploy

      - name: Notify Teams deploy
        run: |
          curl -H 'Content-Type: application/json' \
          -d '{
            "title": "üöÄ Deploy Completed",
            "text": "O deploy na branch production foi conclu√≠do.\nVeja detalhes: ${{ github.run_url }}"
          }' ${{ secrets.TEAM_WEBHOOK_URL }}
